"use strict";var Ligature={models:{},collections:{},objects:{},views:{},singletonViews:{}};
"use strict";var LigatureUtils={eventAdder:function(t,e,r){var n=this.getNodeArray(t)||[],o=n.length;for(i=0;i<o;i++)n[i].addEventListener(e,r);return n},extendObject:function(t,e){return Object.keys(e).forEach(function(r){t[r]=e[r]}),t},getLocation:function(t){var e=t.getBoundingClientRect();return extendObject(e,{width:e.right-e.left,height:e.bottom-e.top}),e},getNodeArray:function(t){return Array.prototype.slice.apply(document.querySelectorAll(t))}};
"use strict";Ligature.models.Base=Backbone.Model.extend({urlRoot:"/api",defaults:{},initialize:function(){}}),Ligature.models.Note=Backbone.Model.extend({urlRoot:"/api",defaults:{},initialize:function(){}}),Ligature.models.Book=Backbone.Model.extend({urlRoot:"/api",defaults:{},initialize:function(){}}),Ligature.collections.Base=Backbone.Collection.extend({url:"/api",initialize:function(){},fetch:function(e){Backbone.Collection.prototype.fetch.apply(this,_.extend(e,{processData:!0}))}}),Ligature.collections.NoteCollection=Backbone.Collection.extend({url:"/api",initialize:function(){},fetch:function(e){Backbone.Collection.prototype.fetch.apply(this,_.extend(e,{processData:!0}))}}),Ligature.collections.BookCollection=Backbone.Collection.extend({url:"/api",initialize:function(){},fetch:function(e){Backbone.Collection.prototype.fetch.apply(this,_.extend(e,{processData:!0}))}});
"use strict";Ligature.viewManager=Ligature.models.Base.extend({initialize:function(){this.attributes={notesLoaded:!1,dirtyEdits:!1,activeBook:!1,activeNote:!1,openBooks:[],editingMode:!1}},changeMode:function(e){"overview"===e||"editing"===e||console.warn(e+" isn't a valid editing mode!")}}),Ligature.views.Base=Backbone.View.extend({className:"",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.Header=Backbone.View.extend({tagName:"header",className:"",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.Toolbar=Backbone.View.extend({className:"toolbar",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.BookList=Backbone.View.extend({className:"",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.BookListItem=Backbone.View.extend({className:"",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.BookDropdown=Backbone.View.extend({className:"",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.NoteList=Backbone.View.extend({className:"",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.NoteListItem=Backbone.View.extend({className:"",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.Sidebar=Backbone.View.extend({id:"sidebar",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.Editor=Backbone.View.extend({id:"editor",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.ModeButton=Backbone.View.extend({tagName:"button",id:"mode-button",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.Modal=Backbone.View.extend({id:"modal",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.App=Backbone.View.extend({template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}});
"use strict";Ligature.Router=Backbone.Router.extend({});
"use strict";Ligature.init=function(){Ligature.objects.notes=new Ligature.collections.NoteCollection,Ligature.objects.books=new Ligature.collections.BookCollection,Ligature.singletonViews.app=new Ligature.views.App,Ligature.core=new Ligature.viewManager,Ligature.router=new Ligature.Router,$("#content").append(Ligature.singletonViews.app.render().$el),Ligature.objects.notes.fetch(),console.info("Ligature initialized")},Ligature.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
