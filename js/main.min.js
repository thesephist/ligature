"use strict";var Ligature={models:{},collections:{},objects:{},views:{},singletonViews:{}};
"use strict";var LigatureUtils={eventAdder:function(t,e,r){var n=this.getNodeArray(t)||[],o=n.length;for(i=0;i<o;i++)n[i].addEventListener(e,r);return n},extendObject:function(t,e){return Object.keys(e).forEach(function(r){t[r]=e[r]}),t},getLocation:function(t){var e=t.getBoundingClientRect();return extendObject(e,{width:e.right-e.left,height:e.bottom-e.top}),e},getNodeArray:function(t){return Array.prototype.slice.apply(document.querySelectorAll(t))}};
"use strict";Ligature.models.Base=Backbone.Model.extend({urlRoot:"/api",defaults:{},initialize:function(){}}),Ligature.models.Note=Backbone.Model.extend({urlRoot:"/api",defaults:{},initialize:function(){}}),Ligature.models.Book=Backbone.Model.extend({urlRoot:"/api",defaults:{},initialize:function(){}}),Ligature.collections.Base=Backbone.Collection.extend({url:"/api",initialize:function(){},fetch:function(e){Backbone.Collection.prototype.fetch.apply(this,_.extend(e,{processData:!0}))}}),Ligature.collections.NoteCollection=Backbone.Collection.extend({url:"/api",initialize:function(){},fetch:function(e){Backbone.Collection.prototype.fetch.apply(this,_.extend(e,{processData:!0}))}}),Ligature.collections.BookCollection=Backbone.Collection.extend({url:"/api",initialize:function(){},fetch:function(e){Backbone.Collection.prototype.fetch.apply(this,_.extend(e,{processData:!0}))}});
"use strict";Ligature.viewManager=Ligature.models.Base.extend({initialize:function(){this.attributes={notesLoaded:!1,dirtyEdits:!1,activeBook:!1,activeNote:!1,editingMode:"overview"}},changeMode:function(e){"overview"===e||"editing"===e||console.warn(e+" isn't a valid editing mode!")}}),Ligature.views.Base=Backbone.View.extend({className:"",template:"\n      <div></div>\n    ",events:{},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.Sidebar=Backbone.View.extend({className:"sidebar",header:!1,booklist:!1,template:"",events:{},initialize:function(e){this.header=new Ligature.views.Header,this.booklist=new Ligature.views.BookList,this.render()},render:function(){return this.$el.html(this.template),this.$el.append(this.header.render().$el),this.$el.append(this.booklist.render().$el),this}}),Ligature.views.Header=Backbone.View.extend({tagName:"header",toolbar:!1,template:'\n      <a href="/">\n        Ligature\n      </a>\n    ',events:{},initialize:function(e){this.toolbar=new Ligature.views.Toolbar,this.render()},render:function(){return this.$el.html(this.template),this.$el.append(this.toolbar.render().$el),this}}),Ligature.views.Toolbar=Backbone.View.extend({className:"toolbar",template:'\n      <div>\n        <button class="add">add</button>\n        <button class="collapse">collapse</button>\n        <button class="search">search</button>\n\n        <input class="searchbar" type="text" placeholder="search"></input>\n      </div>\n    ',events:{"click .add":"addClick","click .collapse":"collapseClick","click .search":"searchClick","keydown .searchbar":"searchInput"},addClick:function(e){},collapseClick:function(e){},searchClick:function(e){},searchInput:function(e){},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.BookList=Backbone.View.extend({className:"booklist",books:!1,template:"",events:{},initialize:function(e){this.books=Ligature.objects.books.map(function(e){return new Ligature.views.BookListItem({model:e})}),this.render()},render:function(){var e=this;return this.$el.html(this.template),this.books.forEach(function(t){return e.$el.append(t.render().$el)}),this}}),Ligature.views.BookListItem=Backbone.View.extend({className:"booklistItem",expanded:!1,notelist:!1,template:'\n      <div class="bookname">\n      </div>\n\n      <div class="lastEdited">\n      </div>\n      <div class="noteCount">\n      </div>\n\n      <div class="notes expanded'+(void 0).expanded+'">\n      </div>\n    ',events:{click:"select"},initialize:function(e){this.notelist=new Ligature.views.NoteList({model:this.model}),this.render()},select:function(e){this.expanded=!this.expanded,this.render()},render:function(){return this.$el.html(this.template),this.$(".bookname").html(this.model.get("name")),this.$(".lastEdited").html(this.model.get("notes").first().get("timestamp")),this.$(".noteCount").html(this.model.get("notes").length),this.$el.append(this.notelist.render().$el),this}}),Ligature.views.NoteList=Backbone.View.extend({className:"notelist",notes:!1,template:"",events:{},initialize:function(e){this.notes=Ligature.objects.notes.map(function(e){return new Ligature.views.NoteListItem({model:e})}),this.render()},render:function(){var e=this;return this.$el.html(this.template),this.books.forEach(function(t){return e.$el.append(t.render().$el)}),this}}),Ligature.views.NoteListItem=Backbone.View.extend({className:"notelistItem",buttonset:!1,template:'\n      <div class="title">\n      </div>\n      <div class="firstline">\n      </div>\n\n      <div class="buttonset">\n      </div>\n    ',events:{click:"select"},initialize:function(e){this.buttonset=new Ligature.views.NoteButtonSet,this.render()},select:function(e){Ligature.viewManager.set("activeNote",this.model)},render:function(){return this.$el.html(this.template),this.$(".title").html(this.model.get("title")),this.$(".firstline").html(this.model.get("content").substr(0,100)),this.$(".buttonset").html(this.buttonset.render().$el),this}}),Ligature.views.NoteButtonSet=Backbone.View.extend({className:"notebuttonset",template:'\n      <button class="back">back</button>\n      <button class="copy">copy</button>\n      <button class="delete">delete</button>\n    ',events:{"click .back":"backClick","click .copy":"copyClick","click .delete":"deleteClick"},initialize:function(e){this.render()},render:function(){return this.$el.html(this.template),this}}),Ligature.views.Editor=Backbone.View.extend({id:"editor",buttonset:!1,template:'\n      <button class=\'modeSwitch\'>mode</button>\n      <div class="buttonset">\n      </div>\n\n      <div class="titlebar">\n      </div>\n\n      <div class="metadatabar">\n        <span class="lastEdited"></span> |\n        <span class="words"></span> |\n        <span class="chars"></span>\n      </div>\n\n      <textarea class="content">\n      </textarea>\n    ',events:{"click .modeSwitch":"modeSwitch","click .titlebar":"setTitle"},initialize:function(e){this.buttonset=new Ligature.views.NoteButtonSet,this.render()},render:function(){this.$el.html(this.template);var e=Ligature.viewManager.get("activeNote");return this.$(".titlebar").html(e.get("title")),this.$(".content").val(e.get("content")),this.$(".lastEdited").html(e.get("timestamp")),this.$(".words").html(e.get("content").split(" ").length),this.$(".chars").html(e.get("content").length),this.$(".buttonset").html(this.buttonset.render().$el),this}}),Ligature.views.Modal=Backbone.View.extend({id:"modal",template:'\n      <div class="copy">\n      </div>\n\n      <input class="modalInput"></input>\n\n      <button class="bad">Cancel</button>\n      <button class="good">Ok</button>\n    ',events:{"click .good":"goodClick","click .bad":"badClick"},initialize:function(e){this.render()},goodClick:function(e){},badClick:function(e){},alert:function(e){},confirm:function(e){},prompt:function(e){},_call:function(e,t,i,n,s){},render:function(){return this.$el.html(this.template),this}}),Ligature.views.App=Backbone.View.extend({template:"",sidebar:!1,editor:!1,events:{},initialize:function(e){this.sidebar=new Ligature.views.Sidebar,this.editor=new Ligature.views.Editor,this.modal=new Ligature.views.Modal,this.render()},render:function(){return this.$el.html(this.template),this.$el.append(this.sidebar.render().$el),this.$el.append(this.editor.render().$el),this.$el.append(this.modal.render().$el),this}});
"use strict";Ligature.Router=Backbone.Router.extend({});
"use strict";Ligature.init=function(){Ligature.objects.notes=new Ligature.collections.NoteCollection,Ligature.objects.books=new Ligature.collections.BookCollection,Ligature.singletonViews.app=new Ligature.views.App,Ligature.core=new Ligature.viewManager,Ligature.router=new Ligature.Router,$("#content").append(Ligature.singletonViews.app.render().$el),Ligature.objects.notes.fetch(),console.info("Ligature initialized")},Ligature.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
